name: Maester Daily Tests

on:
  push:
    branches: ["main"]
  # Run once a day at midnight
  schedule:
    - cron: "0 0 * * *"
  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
      id-token: write
      contents: read
      checks: write

jobs:
  run-maester-tests:
    name: Run Maester Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set current date as env variable
      run: echo "NOW=$(date +'%Y-%m-%d-T%H%M%S')" >> $GITHUB_ENV
    - name: Run Maester
      shell: pwsh
      env:
        TENANTID: ${{ secrets.AZURE_TENANT_ID }}
        CLIENTID: ${{ secrets.AZURE_CLIENT_ID }}
        CLIENTSECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      run: |
        # Connect to Microsoft Graph
        $clientSecret = ConvertTo-SecureString -AsPlainText $env:CLIENTSECRET -Force
        [pscredential]$clientSecretCredential = New-Object System.Management.Automation.PSCredential($env:CLIENTID, $clientSecret)
        Connect-MgGraph -TenantId $env:TENANTID -ClientSecretCredential $clientSecretCredential

        # Install Maester
        Install-Module Maester -Force

        # Configure test results
        $PesterConfiguration = New-PesterConfiguration

        # Run Maester tests
        $results = Invoke-Maester -Path tests/Maester/ -PesterConfiguration $PesterConfiguration -OutputFolder test-results -OutputFolderFileName "test-results" -OutputJsonFile results.json -PassThru
        
        # Generate Jira authentication bearer token
        $Text = $env:JIRAEMAIL + ":" + $env:JIRATOKEN
        $Bytes = [System.Text.Encoding]::UTF8.GetBytes($Text)
        $global:EncodedText = [Convert]::ToBase64String($Bytes)
        
        # Function to create a JIRA ticket
        function Create-JiraTicket {
            param (
                [string]$name,
                [string]$description
            )
        
            $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
            $headers.Add("Content-Type", "application/json")
            $headers.Add("Authorization", "Basic $global:EncodedText")
        
        $body = @"
        {
            `"fields`":  {
                        `"summary`":  `"$name`",
                        `"project`":  {
                                        `"key`":  `"MT`"
                                    },
                        `"issuetype`":  {
                                            `"id`":  `"10001`"
                                        }
                    }
        }
        "@
        
            $response = Invoke-RestMethod 'https://jasperbaes.atlassian.net/rest/api/3/issue' -Method 'POST' -Headers $headers -Body $body
            $response | ConvertTo-Json
        }
        
        # Returns if a Jira ticket exists with a given search string
        function CheckIfJiraTicketExistsByName {
            param (
                [string]$name
            )
        
            try {
                $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
                $headers.Add("Authorization", "Basic $global:EncodedText")
                $response = Invoke-RestMethod "https://jasperbaes.atlassian.net/rest/api/3/search?jql=summary%20~%20%27$name%27" -Method 'GET' -Headers $headers
                $response = $response.total
                return $response -gt 0
            } catch {
                Write-Host "error"
                return $false
            }
        }
        
        # Loop over all Maester results
        foreach ($result in $results) {
            # Continue if the Maester check failed
            if ($result.Result -eq "Failed") {
        
                # Continue if no Jira issue yet exists that contains as title MT.XXXX and has status Open
                $check = CheckIfJiraTicketExistsByName -name $result.Name.Split(':')[0]
                if ($check -eq $false) {
                    # Create Jira incident
                    $name = $result.Name
                    $description = "Test $name has failed. Please investigate."
                    Create-JiraTicket -name $name -description $description
                    Write-Output "Created JIRA ticket for $name"
                }
            }
        }

    - name: Archive Maester Html Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: maester-test-results-${{ env.NOW }}
        path: test-results
